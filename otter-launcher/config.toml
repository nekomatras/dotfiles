

#   ██████╗ ████████╗████████╗███████╗██████╗                         
#  ██╔═══██╗╚══██╔══╝╚══██╔══╝██╔════╝██╔══██╗                        
#  ██║   ██║   ██║      ██║   █████╗  ██████╔╝█████╗                  
#  ██║   ██║   ██║      ██║   ██╔══╝  ██╔══██╗╚════╝                  
#  ╚██████╔╝   ██║      ██║   ███████╗██║  ██║                        
#   ╚═════╝    ╚═╝      ╚═╝   ╚══════╝╚═╝  ╚═╝                        
#  ██╗      █████╗ ██╗   ██╗███╗   ██╗ ██████╗██╗  ██╗███████╗██████╗ 
#  ██║     ██╔══██╗██║   ██║████╗  ██║██╔════╝██║  ██║██╔════╝██╔══██╗
#  ██║     ███████║██║   ██║██╔██╗ ██║██║     ███████║█████╗  ██████╔╝
#  ██║     ██╔══██║██║   ██║██║╚██╗██║██║     ██╔══██║██╔══╝  ██╔══██╗
#  ███████╗██║  ██║╚██████╔╝██║ ╚████║╚██████╗██║  ██║███████╗██║  ██║
#  ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝

# Terminal shell script launcher, written in rust
# Source Code: https://github.com/kuokuo123/otter-launcher

# Recommended to be used in companion with sway-launcher-desktop to launch desktop applications
# https://github.com/Biont/sway-launcher-desktop


[general]
default_module = "run" # The module to run when no prefix is matched
empty_module = "app" # run with an empty prompt
exec_cmd = "sh -c" # The exec command of your shell, default to sh
# for example: "bach -c" for bash; "zsh -c" for zsh. This can also runs wm exec commands, like hyprctl dispatch exec
vi_mode = true # set true to use vi keybinds, false to use emacs keybinds; default to emacs
esc_to_abort = true # allow to quit with esc keypress; a useful option for vi users
cheatsheet_entry = "?" # when entered, otter-launcher will show a list of configured modules
cheatsheet_viewer = "less -R; clear" # the program that otter-launcher will pipe cheatsheet into
clear_screen_after_execution = false # useful when chafa image flash back after module execution
loop_mode = false # in loop mode, otter-launcher won't quit after running a module, useful when using scratchpad
external_editor = "" # if set, pressing ctrl+e (or pressing v in vi normal mode) will edit the input field in the specified program; default to no external editor
#callback = "" # if set, otter-launcher will run the command after a module is executed; for example, it can call swaymsg to adjust window size


# ASCII color codes are allowed with these options. However, \x1b should be replaced with \u001B (unicode escape) because the rust toml crate cannot read \x as an escaped character...
[interface]
header_cmd = """
# pad an empty line to the top of the image
echo -e ""
# pad 3 spaces to the left of the image
printf "\u001B[3G"
# print the image using chafa
chafa --clear -s 22x8 $(find $HOME/Pictures/otter-launcher/ -maxdepth 1 -type f | shuf -n 1)
# move cursor up 7 lines to print texts higher
printf "\u001B[7A"
# move cursor right 20 chars to print texts next to the image
printf "\u001B[20G"
# print a line showing system info
echo -e "\u001B[1m$USER@$HOSTNAME               \u001B[33m󰍛\u001B[0m $(free -h | awk 'FNR == 2 {print $3}')\"
# move cursor right 20 chars to start the input field at the right position
echo -e "\u001B[20G$(printf %16s)\u001B[20G"
"""

header = ""

# putting header_cmd and header in the same line
header_concatenate = true

# move listed item to the right "\u001B[21G" means moving them right 21 character width
list_prefix = "\u001B[21G "
selection_prefix = "\u001B[20G\u001B[31;1m> "
default_module_message = "\u001B[21G \u001B[33mrun\u001B[0m..."

suggestion_mode = "list"
suggestion_lines = 4

place_holder = "type and search"
prefix_padding = 3
prefix_color = "\u001B[33m"
description_color = "\u001B[38m"
place_holder_color = "\u001B[90m"
hint_color = "\u001B[90m"




# Modules are defined as followed
[[modules]]
description = "search with google"
prefix = "gg"
# try wm's exec command if 'setsid -f' does not work, eg. 'hyprctl dispatch exec'
cmd = "setsid -f xdg-open 'https://www.google.com/search?q={}'"
with_argument = true # If "with_argument" is true, the {} in the cmd value will be replaced with user input. If the field is not explicitly set, will be taken as false.
url_encode = true # "url_encode" should be true if the module is set to call webpages, as this ensures special characters in url being readable to browsers. It'd better be false with shell scripts. If the field is not explicitly set, will be taken as false.

[[modules]]
description = "run app"
prefix = "run"
cmd = "setsid -f gtk-launch {}"
#cmd = "/bin/sh -e {}"
with_argument = true
url_encode = false

[[modules]]
description = "application menu"
prefix = "app"
cmd = """
desktop_file() {
dmenu_path 2>/dev/null
}
selected="$(desktop_file | sed 's/.desktop$//g' | sort | fzf -m -d / --with-nth -1 --reverse --padding 1,3 --prompt 'Launch Apps: ')"
[ -z "$selected" ] && exit
echo "$selected" | while read -r line ; do setsid -f gtk-launch "$(basename $line)"; done
"""

#[[modules]]
#description = "search github"
#prefix = "gh"
#cmd = "setsid -f xdg-open https://github.com/search?q='{}'"
#with_argument = true
#url_encode = true

#[[modules]]
#description = "cambridge dictionary online"
#prefix = "dc"
#cmd = "setsid -f xdg-open 'https://dictionary.cambridge.org/dictionary/english/{}'"
#with_argument = true
#url_encode = true

# fzf and fd are needed to run these functions
#[[modules]]
#description = "open files"
#prefix = "fo"
#cmd = "fd --type f | fzf | setsid -f xargs -r -I {} xdg-open '{}'"

#[[modules]]
#description = "open folders"
#prefix = "yz"
#cmd = "fd --type d | fzf | xargs -r -I {} yazi '{}'"
